#!/usr/bin/env bash
set -eo pipefail
IFS=$'\n\t'

if ! [ -x "$(command -v docker)" ]; then
  echo 'Error: docker is not installed.' >&2
  exit 1
fi

if ! [ -x "$(command -v docker-compose)" ]; then
  echo 'Error: docker-compose is not installed.' >&2
  exit 1
fi

projectbox () {

  source .env-latest
  echo "Using latest, stable releases"

  # Enter attaches users to a shell in the desired container
  enter () {
    case $2 in
      influxdb)
        echo "Entering /bin/bash session in the influxdb container..."
        docker-compose exec influxdb /bin/bash
        ;;
      chronograf)
        echo "Entering /bin/sh session in the chronograf container..."
        docker-compose exec chronograf /bin/sh
        ;;
      kapacitor)
        echo "Entering /bin/bash session in the kapacitor container..."
        docker-compose exec kapacitor /bin/bash
        ;;
      telegraf)
        echo "Entering /bin/bash session in the telegraf container..."
        docker-compose exec telegraf /bin/bash
        ;;
      *)
        echo "projectbox enter (influxdb||chronograf||kapacitor||telegraf)"
        ;;
    esac
  }

  # Logs streams the logs from the container to the shell
  logs () {
    case $2 in
      influxdb)
        echo "Following the logs from the influxdb container..."
        docker-compose logs -f influxdb
        ;;
      chronograf)
        echo "Following the logs from the chronograf container..."
        docker-compose logs -f chronograf
        ;;
      kapacitor)
        echo "Following the logs from the kapacitor container..."
        docker-compose logs -f kapacitor
        ;;
      telegraf)
        echo "Following the logs from the telegraf container..."
        docker-compose logs -f telegraf
        ;;
      *)
        echo "projectbox logs (influxdb||chronograf||kapacitor||telegraf)"
        ;;
    esac
  }

  case $1 in
    up)
      echo "Building Kapacitor image based on debian-buster and python 3.7"
      echo "If this is your first time starting projectbox this might take a minute..."
      docker build -f ./images/kapacitor/buster/Dockerfile -t kapacitor:buster ./images/kapacitor/buster/

      echo "Spinning up Docker Images..."
      echo "If this is your first time starting projectbox this might take a minute..."
      docker-compose up -d --build

#     Configuring Project artifacts	  
      echo Configuring Project artifacts...

#     Create db for the current project. If you attempt to create a database that already exists, InfluxDB does nothing and does not return an error.
      echo Creating database "printer" by InfluxDB HTTP API. If a database that already exists, InfluxDB does nothing and does not return an error.
      echo Expected response is {"results":[{"statement_id":0}]}.
	  echo If actual result differs then try run manually: curl -XPOST 'http://localhost:8086/query' --data-urlencode 'q=CREATE DATABASE "printer"'
      curl -XPOST 'http://localhost:8086/query' --data-urlencode 'q=CREATE DATABASE "printer"'

#	  Configuring Kapacitor Task ads_demo...
		docker exec -it dummy-kapacitor_udf_python-scikit-grafana_kapacitor_1 bash -c "kapacitor define ads_demo -tick ./TICKscripts/ads_demo.tick && kapacitor enable ads_demo && kapacitor list tasks"

      echo "Opening tabs in browser..."
      sleep 3
      echo "Grafana is available on http://localhost:3001"
      echo "Chronograf is available on http://localhost:8888"
      echo "Kapacitor and Influx will sync subscription during 1 minutes. Wait before sending the test data stream by test-data-ingestion-scripts\printer_data.py"
      ;;
    down)
      echo "Stopping projectbox containers..."
      docker-compose down
      ;;
    restart)
      echo "Stopping all projectbox processes..."
      docker-compose down > /dev/null 2>&1
      echo "Starting all projectbox processes..."
      docker-compose up -d --build > /dev/null 2>&1
      echo "Services available!"
      ;;
    delete-data)
      echo "deleting all influxdb, kapacitor and chronograf data..." # We do not delete grafana data as user do not need import dashboards manualy again, it is more convenient while development and evaluating
      rm -rf kapacitor/data influxdb/data chronograf/data
      ;;
#   Dislike this command as it delete all images even those are not created by this script
#   Comment this while development and evaluation. It is not hard to clean everything manually  
#    docker-clean)
#      echo "Stopping and removing running projectbox containers..."
#      docker-compose down
#      echo "Removing TICK images..."
#      docker rmi projectbox_documentation influxdb:latest telegraf:latest kapacitor:latest chronograf:latest chrono_config:latest quay.io/influxdb/influxdb:nightly quay.io/influxdb/chronograf:nightly> /dev/null 2>&1
#      docker rmi $(docker images -f "dangling=true" -q)
#      ;;
    influxdb)
      echo "Entering the influx cli..."
      docker-compose exec influxdb /usr/bin/influx
      ;;
# Flux option is not used in current prototype version
#    flux)
#      echo "Entering the flux repl..."
#      docker-compose exec influxdb /usr/bin/influx -type flux
#      ;;
# This is optional command to local access native Influx Docs
#    rebuild-docs)
#      echo "Rebuilding documentation container..."
#      docker build -t projectbox_documentation documentation/ > /dev/null 2>&1
#      echo "Restarting..."
#      docker-compose down > /dev/null 2>&1
#      docker-compose up -d --build > /dev/null 2>&1
#      ;;
    enter)
      enter $@
      ;;
    logs)
      logs $@
      ;;
    *)
      cat <<-EOF
projectbox commands:
  up      -> spin up the projectbox environment
  down               -> tear down the projectbox environment (latest or nightlies specified in the companion file)
  restart -> restart the projectbox
  influxdb           -> attach to the influx cli

  enter (influxdb||kapacitor||chronograf||telegraf) -> enter the specified container
  logs  (influxdb||kapacitor||chronograf||telegraf) -> stream logs for the specified container

  delete-data  -> delete all data created by the TICK Stack
EOF
      ;;
  esac
}

pushd `dirname $0` > /dev/null
    projectbox $@
popd > /dev/null
